3. Applied Visual Design
- text-align: justify; causes all lines of text except the last line to meet the left and right edges of the line box.
- text-align: center; centers the text
- text-align: right; right-aligns the text
- text-align: left; (the default) left-aligns the text.
- you can specify the width of an element using the width property in CSS. Values can be given in relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element:
	img {
		width: 220px;
	}
- you can specify the height of an element using the height property in CSS:
	img {
		height: 20px;
	}
- font-weight: bold --- or <strong>
- <u> - for underlining the text
- font-style: italic --- or <em>
- text-decoration: line-through --- or <s> (strikethrought text)
- you can use the <hr> tag to add a horizontal line across the width of its containing element
- background-color: rgba(45, 45, 45, 0.1); last paremeter: alpha/level of opacity (range: 1 (fully opaque) to 0 (solid))
- the box-shadow property applies one or more shadows to an element.
- the box-shadow property takes values for:
	offset-x (how far to push the shadow horizontally from the element),
	offset-y (how far to push the shadow vertically from the element),
	blur-radius,
	spread-radius
	color
- the blur-radius and spread-radius values are optional.
- box-shadow example:
	box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
- the opacity property in CSS is used to adjust the opacity, or conversely, the transparency for an item.
	opacity: 0.7
- opacity values:
	a value of 1 is opaque, which isn't transparent at all.
	a value of 0.5 is half see-through.
	a value of 0 is completely transparent.
- text-transform - used to change the appearance of text:
	lowercase	"transform me"
	uppercase	"TRANSFORM ME"
	capitalize	"Transform Me"
	initial	Use the default value
	inherit	Use the text-transform value from the parent element
	none	Default: Use the original text
- font-size - used to specify how large the text is in a given element
- font-weight - sets how thick or thin characters are in a section of text
- line-height - changes the height of each line in a block of text
- hover:
	a:hover {
		color: red;
	}
- CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model
- block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans)
- the default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it.
- when the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position in the normal flow of the page. It pairs with the CSS offset properties of left or right, and top or bottom. These say how many pixels, percentages, or ems to move the item away from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:
	p {
	  position: relative;
	  bottom: 10px;
	}
- changing an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.
- note: Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.
- the next option for the CSS position property is absolute, which locks the element in place relative to its parent container. Unlike the relative position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.
- one nuance with absolute positioning is that it will be locked relative to its closest positioned ancestor. If you forget to add a position rule to the parent item, (this is typically done using position: relative;), the browser will keep looking up the chain and ultimately default to the body tag.
- the next layout scheme that CSS offers is the fixed position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer "realize" where it is positioned, which may require some layout adjustments elsewhere.
- one key difference between the fixed and absolute positions is that an element with a fixed position won't move when the user scrolls.
- floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element. It's commonly used with the width property to specify how much horizontal space the floated element requires.
- when elements are positioned to overlap (i.e. using position: absolute | relative | fixed | sticky), the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the z-index property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the z-index property of an element move it higher in the stack than those with lower values.
- another positioning technique is to center a block element horizontally. One way to do this is to set its margin to a value of auto. This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the display property to block.
- complementary colors:
	red (#FF0000) and cyan (#00FFFF)
	green (#00FF00) and magenta (#FF00FF)
	blue (#0000FF) and yellow (#FFFF00)
- tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, within the RGB color model, red (primary) and yellow (secondary) make orange (tertiary). This adds six more colors to a simple color wheel for a total of twelve.
- colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the hsl() property as an alternative way to pick a color by directly stating these characteristics.
- hue is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In hsl(), hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.
- saturation is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.
- lightness is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.
- here are a few examples of using hsl() with fully-saturated, normal lightness colors:
	Color	HSL
	red	hsl(0, 100%, 50%)
	yellow	hsl(60, 100%, 50%)
	green	hsl(120, 100%, 50%)
	cyan	hsl(180, 100%, 50%)
	blue	hsl(240, 100%, 50%)
	magenta	hsl(300, 100%, 50%)
- the hsl() option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of hsl() stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.
- all elements have a default background-color of transparent
- applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the background property's linear-gradient() function. Here is the general syntax:
	background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);
- the first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a horizontal gradient (from left to right) and 45deg makes a diagonal gradient (from bottom left to top right). The following arguments specify the order of colors used in the gradient. example: 
	background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));
- the repeating-linear-gradient() function is very similar to linear-gradient() with the major difference that it repeats the specified gradient pattern. repeating-linear-gradient() accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge. The angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels. In the example demonstrated in the code editor, the gradient starts with the color yellow at 0 pixels which blends into the second color blue at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color green, which itself blends into the fourth color value red as that is 80 pixels away from the beginning of the gradient. For this example, it helps to think about the color stops as pairs where every two colors blend together.
	0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px
- if every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.
- one way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The background property supports the url() function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.
- to change the scale of an element, CSS has the transform property, along with its scale() function. The following code example doubles the size of all the paragraph elements on the page:
	p {
	  transform: scale(2);
	}
- the next function of the transform property is skewX(), which skews the selected element along its X (horizontal) axis by a given degree. The following code skews the paragraph element by -32 degrees along the X-axis.
	p {
	  transform: skewX(-32deg);
	}
- these pseudo-elements (::before and ::after) are used to add something before or after a selected element
- for the ::before and ::after pseudo-elements to function properly, they must have a defined content property. This property is usually used to add things like a photo or text to the selected element. When the ::before and ::after pseudo-elements are used to make shapes, the content property is still required, but it's set to an empty string.
- to animate an element, you need to know about the animation properties and the @keyframes rule. The animation properties control how the animation should behave and the @keyframes rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:
	animation-name sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations.
	animation-duration sets the length of time for the animation.
	@keyframes is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific "frames" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. 
- here's an example to illustrate the usage of @keyframes and the animation properties:
	#anim {
	  animation-name: colorful;
	  animation-duration: 3s;
	}

	@keyframes colorful {
	  0% {
		background-color: blue;
	  }
	  100% {
		background-color: yellow;
	  }
	}
- the animation-fill-mode specifies the style applied to an element when the animation has finished. You can set it like so:
	animation-fill-mode: forwards;
- another animation property is the animation-iteration-count, which allows you to control how many times you would like to loop through the animation. Here's an example:
	animation-iteration-count: 3;
- in CSS animations, the animation-timing-function property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your animation-duration), the animation-timing-function says how the car accelerates and decelerates over the course of the drive. There are a number of predefined keywords available for popular options. For example, the default value is ease, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include ease-out, which is quick in the beginning then slows down, ease-in, which is slow in the beginning, then speeds up at the end, or linear, which applies a constant animation speed throughout.
- the animation-timing-function property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves. In CSS animations, Bezier curves are used with the cubic-bezier function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation. The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3. p0 and p3 are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the p1 and p2 "anchor" points in the form: (x1, y1, x2, y2). Pulling it all together, here's an example of a Bezier curve in CSS code:
	animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);
- a previous challenge discussed the ease-out keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the ease-out keyword (for the blue element) and linear keyword (for the red element) is demonstrated. Similar animation progressions to the ease-out keyword can be achieved by using a custom cubic Bezier curve function. In general, changing the p1 and p2 anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the ease-out style:
	animation-timing-function: cubic-bezier(0, 0, 0.58, 1);