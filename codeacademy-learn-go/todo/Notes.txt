---------------
func doubleNum(num int) int {
  return num * 2
}
---------------
math.Log2(math.Sqrt(math.Tanh(x)))
---------------
Multiple Return Values

func GPA(midtermGrade float32, finalGrade float32) (string, float32) {
  averageGrade := (midtermGrade + finalGrade) / 2
  var gradeLetter string
  if averageGrade > 90 {
    gradeLetter = "A"
  } else if averageGrade > 80 {
    gradeLetter = "B"
  } else if averageGrade > 70 {
    gradeLetter = "C"
  } else if averageGrade > 60 {
    gradeLetter = "D"
  } else {
    gradeLetter = "F"
  }
 
  return gradeLetter, averageGrade 
}

myGrade, myAverage = GPA(myMidterm, myFinal)
---------------
'defer' keyword tells Go to run a function, but at the end of the current function.

func calculateTaxes(revenue, deductions, credits float64) float64 {
  defer fmt.Println("Taxes Calculated!")
  taxRate := .06143
  fmt.Println("Calculating Taxes")
 
  if deductions == 0 || credits == 0 {
    return revenue * taxRate
  }
 
 
  taxValue := (revenue - (deductions * credits)) * taxRate
  if taxValue >= 0 {
    return taxValue
  } else {
    return 0
  }
}
---------------
Go is a pass-by-value language. In other words, weâ€™re passing functions the value of an argument
---------------
x := "My very first address"
fmt.Println(&x) // Prints 0x414020
---------------
var pointerForInt *int
 
the * operator signifies that this variable will store an address and the int portion means that the address contains an integer value.
---------------
var pointerForInt *int
 
minutes := 525600
 
pointerForInt = &minutes
 
fmt.Println(pointerForInt) // Prints 0xc000018038
---------------
minutes := 55
 
pointerForInt := &minutes
---------------
Well, we can actually use our pointer to access the address and change its value! This action is called dereferencing or indirecting.

lyrics := "Moments so dear" 
pointerForStr := &lyrics
 
*pointerForStr = "Journeys to plan" 
 
fmt.Println(lyrics) // Prints: Journeys to plan
---------------
func addHundred (numPtr *int) {
  *numPtr += 100
}

func main() {
  x := 1
  addHundred(&x)
  fmt.Println(x) // Prints 101
}
---------------